openapi: 3.0.0
info:
  description: API specification for Book Cloud
  version: v1
  title: API specification for Book Cloud
servers:
  - url: http://localhost:8080/
paths:
  /books:
    get:
      tags:
        - "book"
      summary: Get all books
      operationId: getBooks
      responses:
        '200':
          description: Successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BooksResponse'
        '500':
          description: Unexpected technical errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
    post:
      tags:
        - "book"
      summary: Create a book
      operationId: createBook
      requestBody:
        description: BookEntity request
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/BookRequest'
      responses:
        '200':
          description: Successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookResponse'
        '500':
          description: Unexpected technical errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /books/{bookId}:
    get:
      tags:
        - "book"
      summary: "Find book by ID"
      operationId: "getBookById"
      parameters:
        - name: bookId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookResponse'
        "404":
          description: "Book not found"
    put:
      tags:
        - "book"
      summary: "Update book by ID"
      operationId: "updateBook"
      parameters:
        - name: bookId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: BookEntity request
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/BookRequest'
      responses:
        '200':
          description: Successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookResponse'
        '500':
          description: Unexpected technical errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
    delete:
      tags:
        - "book"
      summary: "Delete book by ID"
      operationId: "deleteBook"
      parameters:
        - name: bookId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '204':
          description: Successfully
        '500':
          description: Unexpected technical errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

  /books/search:
    get:
      tags:
        - "book"
      summary: Search books
      operationId: searchBook
      parameters:
        - in: query
          name: title
          schema:
            type: string
          description: Book title
        - in: query
          name: author
          schema:
            type: string
          description: Book author
      responses:
        '200':
          description: Successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BooksResponse'
        '500':
          description: Unexpected technical errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

  /authors:
    get:
      tags:
        - "author"
      summary: Get all authors
      operationId: getAuthors
      responses:
        '200':
          description: Successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorsResponse'
        '500':
          description: Unexpected technical errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
    post:
      tags:
        - "author"
      summary: Create a author
      operationId: createAuthor
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/AuthorRequest'
      responses:
        '200':
          description: Successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorResponse'
        '500':
          description: Unexpected technical errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /authors/{authorId}:
    get:
      tags:
        - "author"
      summary: "Find author by ID"
      operationId: "getAuthorById"
      parameters:
        - name: authorId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorResponse'
        "404":
          description: "Author not found"
    put:
      tags:
        - "author"
      summary: "Update author by ID"
      operationId: "updateAuthor"
      parameters:
        - name: authorId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/AuthorRequest'
      responses:
        '200':
          description: Successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorResponse'
        '500':
          description: Unexpected technical errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
    delete:
      tags:
        - "author"
      summary: "Delete author by ID"
      operationId: "deleteAuthor"
      parameters:
        - name: authorId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '204':
          description: Successfully
        '500':
          description: Unexpected technical errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

components:
  schemas:
    BooksResponse:
      type: array
      "items": {
        "$ref": "#/components/schemas/BookResponse"
      }

    BookResponse:
      type: object
      properties:
        id:
          type: integer
          format: int32
        title:
          type: string
        type:
          type: string
        description:
          type: string
        authors:
          type: array
          items: {
            "$ref": "#/components/schemas/AuthorResponse"
          }
        publishDate:
          type: string
          format: date
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    BookRequest:
      type: object
      properties:
        title:
          type: string
        type:
          type: string
        description:
          type: string
        authorIds:
          type: array
          items:
            type: integer
        publishDate:
          type: string
          format: date

    AuthorsResponse:
      type: array
      "items": {
        "$ref": "#/components/schemas/AuthorResponse"
      }
    AuthorResponse:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        birthDay:
          type: string
          format: date

    AuthorRequest:
      type: object
      properties:
        name:
          type: string
        birthDay:
          type: string
          format: date

    ApiError:
      type: object
      properties:
        faults:
          type: array
          items:
            $ref: "#/components/schemas/Fault"
    Fault:
      type: object
      properties:
        message:
          type: string
        debugMessage:
          type: string
        externalMessage:
          type: string
        errorCode:
          type: integer